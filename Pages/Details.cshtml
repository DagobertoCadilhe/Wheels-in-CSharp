@page "/veiculo/{slug}/{id:int:min(1)}"
@using Wheels_in_Csharp.Models
@using Wheels_in_Csharp.Pages;

@model Wheels_in_Csharp.Pages.DetailsModel
@{
    ViewData["Title"] = "Detalhes do Veículo";
}

<div class="container">
    <div class="row">
        <div class="col-md-8">
            <h1 class="display-4 mb-4">@Model.Vehicle.Model</h1>
            
            <!-- Galeria de imagens -->
            <div class="mb-4">
                <img class="img-fluid rounded-lg shadow" src="@Model.Vehicle.ImagemUri" alt="@Model.Vehicle.Model">
                <div class="d-flex mt-2">
                    <img src="@Model.Vehicle.ImagemUri" class="img-thumbnail mr-2" width="80">
                    <!-- Adicionar mais miniaturas aqui se tiver mais imagens -->
                </div>
            </div>
            
            <!-- Seção de descrição -->
            <div class="card mb-4">
                <div class="card-body">
                    <h3 class="card-title">Descrição</h3>
                    <p class="card-text">@Model.Vehicle.Description</p>
                </div>
            </div>
        </div>
        
        <div class="col-md-4">
            <!-- Card de reserva -->
            <div class="card shadow-sm sticky-top" style="top: 20px;">
                <div class="card-body">
                    <h3 class="card-title">Alugar este veículo</h3>
                    
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <h4 class="mb-0 text-primary" style="color: #699e73 !important">@Html.DisplayFor(model => model.Vehicle.HourlyRate)/hora</h4>
                        <span class="badge @Model.GetStatusBadgeClass(Model.Vehicle.Status)">
                            @Model.GetStatusDisplayName(Model.Vehicle.Status)
                        </span>
                    </div>
                    
                    @if (Model.Vehicle.Status == VehicleStatus.AVAILABLE)
                    {
                        <form method="post" asp-page-handler="Rent">
                            <input type="hidden" asp-for="Vehicle.Id" />
                            
                            <div class="form-group mb-3">
                                <label for="startDate">Data de Início</label>
                                <input type="datetime-local" class="form-control" id="startDate" name="startDate" required>
                            </div>
                            
                            <div class="form-group mb-3">
                                <label for="endDate">Data de Término</label>
                                <input type="datetime-local" class="form-control" id="endDate" name="endDate" required>
                            </div>
                            
                            <button type="submit" class="btn btn-primary btn-lg w-100 mb-3">
                                Reservar Agora
                            </button>
                        </form>
                    }
                    else
                    {
                        <div class="alert alert-warning">
                            Este veículo está @Model.GetStatusDisplayName(Model.Vehicle.Status).ToLower() no momento.
                        </div>
                        <button class="btn btn-outline-secondary w-100" disabled>
                            @Model.GetStatusDisplayName(Model.Vehicle.Status)
                        </button>
                    }
                    
                    <hr>
                    
                    <div class="d-flex justify-content-between mb-2">
                        <span>Placa:</span>
                        <strong>@Model.Vehicle.LicensePlate</strong>
                    </div>
                    
                    <!-- Mostrar detalhes específicos do tipo de veículo -->
                    @if (Model.Vehicle is Bicycle bicycle)
                    {
                        <div class="d-flex justify-content-between mb-2">
                            <span>Tipo de Bicicleta:</span>
                            <strong>@bicycle.BikeType</strong>
                        </div>
                        <div class="d-flex justify-content-between mb-2">
                            <span>Inclui Capacete:</span>
                            <strong>@(bicycle.HasHelmet ? "Sim" : "Não")</strong>
                        </div>
                    }
                    else if (Model.Vehicle is Car car)
                    {
                        <div class="d-flex justify-content-between mb-2">
                            <span>Combustível:</span>
                            <strong>@car.FuelType</strong>
                        </div>
                        <div class="d-flex justify-content-between mb-2">
                            <span>Ar Condicionado:</span>
                            <strong>@(car.HasAC ? "Sim" : "Não")</strong>
                        </div>
                    }
                    else if (Model.Vehicle is Motorcycle motorcycle)
                    {
                        <div class="d-flex justify-content-between mb-2">
                            <span>Cilindrada:</span>
                            <strong>@motorcycle.EngineCapacity cc</strong>
                        </div>
                        <div class="d-flex justify-content-between mb-2">
                            <span>Inclui Capacete:</span>
                            <strong>@(motorcycle.HasHelmet ? "Sim" : "Não")</strong>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
    
    <!-- Seção de veículos similares -->
    <div class="row mt-5">
        <div class="col-12">
            <h3 class="mb-4">Veículos similares</h3>
            <div class="row">
                <!-- Aqui você pode adicionar um loop para mostrar veículos similares -->
                <!-- Exemplo: -->
                <!-- @foreach (var similarVehicle in Model.SimilarVehicles) -->
                <div class="col-md-4 mb-4">
                    <div class="card h-100">
                        <img src="~/images/vehicle-placeholder.jpg" class="card-img-top" alt="Veículo similar">
                        <div class="card-body">
                            <h5 class="card-title">Modelo Similar</h5>
                            <p class="card-text">Descrição breve do veículo similar.</p>
                            <p class="text-primary">R$ XX/hora</p>
                            <a href="#" class="btn btn-outline-primary">Ver detalhes</a>
                        </div>
                    </div>
                </div>
                <!-- Repetir para outros veículos -->
            </div>
        </div>
    </div>
    
    <!-- Ações administrativas -->
    @if (User.IsInRole("Admin"))
    {
        <div class="row mt-4">
            <div class="col-12">
                <div class="d-flex justify-content-end">
                    <a class="btn btn-primary me-2" asp-page="/Edit" asp-route-id="@Model.Vehicle.Id">
                        <i class="bi bi-pencil"></i> Editar
                    </a>
                    <a class="btn btn-danger" asp-page="/Delete" asp-route-id="@Model.Vehicle.Id">
                        <i class="bi bi-trash"></i> Excluir
                    </a>
                </div>
            </div>
        </div>
    }
</div>

@functions {
    string GetStatusBadgeClass(VehicleStatus status)
    {
        return status switch
        {
            VehicleStatus.AVAILABLE => "bg-success",
            VehicleStatus.RENTED => "bg-danger",
            VehicleStatus.MAINTENANCE => "bg-warning",
            VehicleStatus.DAMAGED => "bg-dark",
            VehicleStatus.RETIRED => "bg-secondary",
            _ => "bg-info"
        };
    }

    string GetStatusDisplayName(VehicleStatus status)
    {
        return status switch
        {
            VehicleStatus.AVAILABLE => "Disponível",
            VehicleStatus.RENTED => "Alugado",
            VehicleStatus.MAINTENANCE => "Em Manutenção",
            VehicleStatus.DAMAGED => "Danificado",
            VehicleStatus.RETIRED => "Retirado",
            _ => status.ToString()
        };
    }
}

<style>
    .sticky-top {
        position: -webkit-sticky;
        position: sticky;
    }
    .card {
        border-radius: 10px;
        overflow: hidden;
    }
    .img-thumbnail {
        cursor: pointer;
        transition: transform 0.2s;
    }
    .img-thumbnail:hover {
        transform: scale(1.05);
    }
</style>

@section Scripts {
    <script>
        // Script para calcular o valor estimado quando as datas mudam
        document.getElementById('startDate').addEventListener('change', calculateEstimate);
        document.getElementById('endDate').addEventListener('change', calculateEstimate);
        
        function calculateEstimate() {
            const startDate = new Date(document.getElementById('startDate').value);
            const endDate = new Date(document.getElementById('endDate').value);
            
            if (startDate && endDate && startDate < endDate) {
                const hours = (endDate - startDate) / (1000 * 60 * 60);
                const rate = @Model.Vehicle.HourlyRate;
                const total = rate * hours;
                
                // Atualizar algum elemento na página com o valor estimado
                console.log(`Valor estimado: R$ ${total.toFixed(2)}`);
            }
        }
    </script>
}
